{
  "info": {
    "name": "SI3 RSVP System - Complete Testing Collection",
    "description": "Comprehensive testing collection for the SI3 RSVP system including authentication, RSVP operations, email notifications, and calendar integration.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:8080');",
          "}",
          "",
          "// Set test event ID if not already set",
          "if (!pm.environment.get('eventId')) {",
          "    pm.environment.set('eventId', 'test-event-123');",
          "}",
          "",
          "// Set test email if not already set",
          "if (!pm.environment.get('testEmail')) {",
          "    pm.environment.set('testEmail', 'test@example.com');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "test-event-123",
      "type": "string"
    },
    {
      "key": "rsvpId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@example.com",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "1. Send Email OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test('OTP sent message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('OTP sent');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/email/send-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "email", "send-otp"]
            },
            "description": "Send OTP to email for authentication. Check your email for the OTP code."
          }
        },
        {
          "name": "2. Verify Email OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test('Access token received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accessToken).to.exist;",
                  "    ",
                  "    // Store the token for subsequent requests",
                  "    pm.environment.set('authToken', jsonData.data.accessToken);",
                  "});",
                  "",
                  "pm.test('User data received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user).to.exist;",
                  "    pm.expect(jsonData.data.user.email).to.eql(pm.environment.get('testEmail'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/email/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "email", "verify-otp"]
            },
            "description": "Verify the OTP received via email. Replace '123456' with the actual OTP from your email."
          }
        }
      ],
      "description": "Authentication flow using email OTP"
    },
    {
      "name": "üìù RSVP Operations",
      "item": [
        {
          "name": "1. Create RSVP",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('RSVP created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data._id).to.exist;",
                  "    ",
                  "    // Store RSVP ID for subsequent requests",
                  "    pm.environment.set('rsvpId', jsonData.data._id);",
                  "});",
                  "",
                  "pm.test('RSVP data is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.eventId).to.eql(pm.environment.get('eventId'));",
                  "    pm.expect(jsonData.data.status).to.eql('attending');",
                  "    pm.expect(jsonData.data.guestCount).to.eql(2);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"status\": \"attending\",\n  \"guestCount\": 2,\n  \"dietaryRestrictions\": \"Vegetarian\",\n  \"specialRequests\": \"Wheelchair accessible seating\",\n  \"contactInfo\": {\n    \"phone\": \"+1234567890\",\n    \"emergencyContact\": \"Jane Doe - +0987654321\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/rsvp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp"]
            },
            "description": "Create a new RSVP for an event. This should trigger a confirmation email."
          }
        },
        {
          "name": "2. Get User RSVPs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('RSVPs retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.rsvps).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Pagination data exists', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.pagination).to.exist;",
                  "    pm.expect(jsonData.data.pagination.currentPage).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/my-rsvps?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "my-rsvps"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all RSVPs for the authenticated user"
          }
        },
        {
          "name": "3. Update RSVP",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('RSVP updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.status).to.eql('maybe');",
                  "    pm.expect(jsonData.data.guestCount).to.eql(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"maybe\",\n  \"guestCount\": 1,\n  \"dietaryRestrictions\": \"Vegan\",\n  \"specialRequests\": \"Please confirm 24 hours before\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/{{rsvpId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "{{rsvpId}}"]
            },
            "description": "Update an existing RSVP. This should trigger an update notification email."
          }
        }
      ],
      "description": "Core RSVP operations - create, read, update"
    },
    {
      "name": "üìä Event Statistics",
      "item": [
        {
          "name": "1. Get Event RSVP Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statistics retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.stats).to.exist;",
                  "});",
                  "",
                  "pm.test('Statistics contain required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const stats = jsonData.data.stats;",
                  "    pm.expect(stats.totalRSVPs).to.exist;",
                  "    pm.expect(stats.attending).to.exist;",
                  "    pm.expect(stats.maybe).to.exist;",
                  "    pm.expect(stats.notAttending).to.exist;",
                  "    pm.expect(stats.totalGuests).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/event/{{eventId}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "event", "{{eventId}}", "stats"]
            },
            "description": "Get RSVP statistics for a specific event"
          }
        },
        {
          "name": "2. Get Event Attendees",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Attendees retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.attendees).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/event/{{eventId}}/attendees?status=attending&page=1&limit=50",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "event", "{{eventId}}", "attendees"],
              "query": [
                {
                  "key": "status",
                  "value": "attending"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "50"
                }
              ]
            },
            "description": "Get list of attendees for a specific event"
          }
        },
        {
          "name": "3. Check Event Availability",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Availability data retrieved', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.isRSVPOpen).to.exist;",
                  "    pm.expect(jsonData.data.hasCapacity).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/event/{{eventId}}/availability",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "event", "{{eventId}}", "availability"]
            },
            "description": "Check if event is available for RSVP"
          }
        }
      ],
      "description": "Event statistics and availability endpoints"
    },
    {
      "name": "üìß Email Notifications",
      "item": [
        {
          "name": "1. Send RSVP Confirmation Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Confirmation email sent', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.message).to.include('sent');",
                  "});",
                  "",
                  "console.log('‚úÖ Check your email ({{testEmail}}) for RSVP confirmation!');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rsvpId\": \"{{rsvpId}}\",\n  \"emailType\": \"confirmation\",\n  \"customMessage\": \"Thank you for your RSVP! We're excited to see you at the event.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/send-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "send-email"]
            },
            "description": "Send RSVP confirmation email to the user. Check your email inbox!"
          }
        },
        {
          "name": "2. Send Event Reminder Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Reminder email sent', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "console.log('‚úÖ Check your email ({{testEmail}}) for event reminder!');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"reminderType\": \"24_hours\",\n  \"customMessage\": \"Don't forget about tomorrow's event! Please bring a valid ID.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/send-reminder",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "send-reminder"]
            },
            "description": "Send event reminder email to all attendees. Requires admin role."
          }
        }
      ],
      "description": "Email notification testing - confirmation, reminders, updates"
    },
    {
      "name": "üìÖ Calendar Integration",
      "item": [
        {
          "name": "1. Download ICS Calendar File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('ICS file content received', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('BEGIN:VCALENDAR');",
                  "    pm.expect(responseText).to.include('END:VCALENDAR');",
                  "    pm.expect(responseText).to.include('BEGIN:VEVENT');",
                  "    pm.expect(responseText).to.include('END:VEVENT');",
                  "});",
                  "",
                  "pm.test('Content-Type is calendar', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/calendar');",
                  "});",
                  "",
                  "console.log('‚úÖ ICS calendar file generated successfully!');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/{{rsvpId}}/calendar?format=ics",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "{{rsvpId}}", "calendar"],
              "query": [
                {
                  "key": "format",
                  "value": "ics"
                }
              ]
            },
            "description": "Download ICS calendar file for the RSVP"
          }
        },
        {
          "name": "2. Get Calendar Links",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Calendar links received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.ics).to.exist;",
                  "    pm.expect(jsonData.data.google).to.exist;",
                  "    pm.expect(jsonData.data.outlook).to.exist;",
                  "});",
                  "",
                  "pm.test('Direct calendar URLs exist', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.googleDirect).to.include('calendar.google.com');",
                  "    pm.expect(jsonData.data.outlookDirect).to.include('outlook.live.com');",
                  "});",
                  "",
                  "console.log('‚úÖ Calendar links generated:');",
                  "console.log('üìÖ Google Calendar:', pm.response.json().data.googleDirect);",
                  "console.log('üìÖ Outlook Calendar:', pm.response.json().data.outlookDirect);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/{{rsvpId}}/calendar-links",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "{{rsvpId}}", "calendar-links"]
            },
            "description": "Get all calendar integration links (ICS, Google, Outlook)"
          }
        }
      ],
      "description": "Calendar integration testing - ICS files, Google Calendar, Outlook"
    },
    {
      "name": "üé´ Waitlist Operations",
      "item": [
        {
          "name": "1. Join Waitlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Successfully joined waitlist', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.status).to.eql('waitlisted');",
                  "    pm.expect(jsonData.data.waitlistPosition).to.exist;",
                  "});",
                  "",
                  "console.log('‚úÖ Joined waitlist at position:', pm.response.json().data.waitlistPosition);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"guestCount\": 1,\n  \"notes\": \"Very interested in attending this event!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/waitlist/join",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "waitlist", "join"]
            },
            "description": "Join the waitlist for an event (when event is at capacity)"
          }
        },
        {
          "name": "2. Get Waitlist Position",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Waitlist position retrieved', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.data.position).to.exist;",
                  "    pm.expect(jsonData.data.totalWaitlisted).to.exist;",
                  "});",
                  "",
                  "console.log('üìç Your waitlist position:', pm.response.json().data.position);",
                  "console.log('üë• Total waitlisted:', pm.response.json().data.totalWaitlisted);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/waitlist/{{eventId}}/position",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "waitlist", "{{eventId}}", "position"]
            },
            "description": "Get your position in the waitlist for an event"
          }
        }
      ],
      "description": "Waitlist functionality testing"
    },
    {
      "name": "üóëÔ∏è Cleanup Operations",
      "item": [
        {
          "name": "1. Delete RSVP",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('RSVP deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});",
                  "",
                  "console.log('‚úÖ RSVP deleted successfully!');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/{{rsvpId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "{{rsvpId}}"]
            },
            "description": "Delete an RSVP (cleanup operation)"
          }
        }
      ],
      "description": "Cleanup operations for testing"
    },
    {
      "name": "üîç Error Testing",
      "item": [
        {
          "name": "1. Test Invalid RSVP Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('error');",
                  "    pm.expect(jsonData.errors).to.exist;",
                  "});",
                  "",
                  "console.log('‚úÖ Validation working correctly!');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"\",\n  \"status\": \"invalid-status\",\n  \"guestCount\": -1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/rsvp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp"]
            },
            "description": "Test validation with invalid RSVP data"
          }
        },
        {
          "name": "2. Test Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication error returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('error');",
                  "    pm.expect(jsonData.message).to.include('authentication');",
                  "});",
                  "",
                  "console.log('‚úÖ Authentication protection working!');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/rsvp/my-rsvps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "rsvp", "my-rsvps"]
            },
            "description": "Test access without authentication token"
          }
        }
      ],
      "description": "Error handling and validation testing"
    }
  ]
}
